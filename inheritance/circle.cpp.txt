//
// circle.cpp
//
// Keith Mehl
// 10/28/08
// CSCI-15 example program
// Illustrate inheritance with a simple circle class
// A Circle is a Point with a radius
//

#include <iostream>
#include <cmath>
using std::ostream;
using std::flush;
using std::sqrt;

#include "circle.h"  // this #includes "point.h"

const double Circle::PI = 3.14159265358979323846;

// default constructor
// invokes default Point constructor in the initializer list
Circle::Circle() : Point()
{
   r = 1.0;
}

// normal constructor
// invokes normal Point constructor in the initializer list
Circle::Circle( double xVal, double yVal, double rVal ) :
               Point( xVal, yVal )
{
   r = rVal;
}

void Circle::setR( double rVal )
{
   r = rVal;
}

void Circle::setAll( double xVal, double yVal, double rVal )
{
   // invoke base class setAll() method
   // Point::setAll( xVal, yVal );
   x = xVal;
   y = yVal;
   r = rVal;
}

double Circle::getR( void )
{
   return r;
}

double Circle::getArea( void )
{
   return PI * r * r;
}

double Circle::distance( Circle &b ) // return distance between self and b
{
   return Point::distance( dynamic_cast<Point &>( b ) );
}

ostream &operator <<( ostream &out, const Circle &c )
{
// dynamic_cast changes referent type of a pointer or reference.  When
// used with a class type, all types must be in one inheritance chain
   out << c.r << ", " << dynamic_cast<const Point &>( c );
   return out;
}


